<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>IDS Installation</title>
    </properties>

    <body>

        <section name="Installation">

            <subsection name="Compatibility">This will work with an ICAT version of 4.3.0 or greater.</subsection>

            <subsection name="Prerequisites">

                <ul>
                    <li>
                        The ids distribution:
                        <a href="${repoUrl}/org/icatproject/ids.server/${project.version}/ids.server-${project.version}-distro.zip">ids.server-${project.version}-distro.zip</a>
                    </li>

                    <li>
                        A suitable deployed container (here assumed to be glassfish though tomcat should be sufficient) to support a web application.
                        Testing has been carried out with Glassfish 4.0.
                        <a href="http://icatproject.org/installation/glassfish/">Glassfish installation instructions</a>
                        are available.
                    </li>

                    <li>
                        A deployed plugin or plugins for the storage mechanism you wish to use. Please see
                        <a href="/mvn/site/ids/plugin">plugin</a>
                        to see the interface you must
                        implement. You might also like to look at the
                        <a href="/mvn/site/ids/storage_file">file storage plugin</a>
                        as an example.
                    </li>

                    <li>
                        Python (version 2.4 to 2.7) installed on the server.
                    </li>
                </ul>
            </subsection>

            <subsection name="Summary of steps">
                <ol>
                    <li>
                        Please follow
                        <a href="http://icatproject.org/installation/component/"> the generic installation instructions</a>
                    </li>

                    <li>Check that it works.</li>
                </ol>
            </subsection>

            <subsection name="The ids-setup.properties file">

                <dl>

                    <dt>glassfish</dt>
                    <dd>is the top level of the glassfish installation. It must contain "glassfish/domains".
                    </dd>
                    <dt>port</dt>
                    <dd>is the administration port of the chosen glassfish domain which is typically 4848.</dd>
                </dl>


            </subsection>


            <subsection name="The ids.properties file">

                <h4>General Properties</h4>

                <dl>
                    <dt> icat.url</dt>
                    <dd>
                        The url of the machine hosting the icat service. It should normally just
                        have the scheme, the hostname and the port. For
                        example:
                        <code>https://example.com:443</code>
                    </dd>

                    <dt>plugin.zipMapper.class</dt>
                    <dd>The class name of the ZipMapper which defines the Zip file structure you want. The class must be deployed in the lib/applibs
                        directory of your domain and must be
                        packaged with all it dependencies.
                    </dd>

                    <dt>plugin.main.class</dt>
                    <dd>The class name of the main storage plugin. The class must be deployed in the lib/applibs directory of your domain and must be
                        packaged with all it dependencies.
                    </dd>

                    <dt>plugin.main.properties</dt>
                    <dd>Optional property file for the main storage plugin.</dd>

                    <dt>cache.dir</dt>
                    <dd>The location (absolute or relative to the config directory of the domain) of a directory to hold mostly zip files.</dd>

                    <dt>preparedCacheSize1024bytes</dt>
                    <dd>The maximum size to allow for prepared zip files in the cache.</dd>

                    <dt>preparedCount</dt>
                    <dd>The maximum number of failed prepareData attempts to hold in memory.</dd>

                    <dt>processQueueIntervalSeconds</dt>
                    <dd>The frequency of checking the process queue. This is used both for cleaning old information from memory and for triggering
                        movements between main and archive storage (if selected).
                    </dd>

                    <dt>rootUserNames</dt>
                    <dd>A space separated list of users allowed to make the getServiceStatus call.</dd>

                    <dt>sizeCheckIntervalSeconds</dt>
                    <dd>How frequently to check the cache sizes and clean up if necessary.</dd>

                    <dt>readOnly</dt>
                    <dd>If true disables write operations (put and delete).
                    </dd>

                    <dt>reader</dt>
                    <dd>
                        space separated icat plugin name and credentials for a user permitted to read all datasets, datafiles, investigations and
                        facilities.
                        For example:
                        <code>db username db/root password password.</code>
                        This is only required if you are using archive storage or if you enable file checking by setting filesCheck.parallelCount to
                        be greater than 0.
                    </dd>


                </dl>

                <h4>Properties for archive storage</h4>

                <dl>

                    <dt>plugin.archive.class</dt>
                    <dd>The class name of the archive storage plugin. The class must be deployed in the lib/applibs directory of your domain and must
                        be packaged with all it dependencies.
                    </dd>

                    <dt>plugin.archive.properties</dt>
                    <dd>Optional property file for the archive storage plugin.</dd>

                    <dt>datasetCacheSize1024bytes</dt>
                    <dd>The maximum size to allow for dataset zip files in the cache.</dd>

                    <dt>writeDelaySeconds</dt>
                    <dd>The amount of time to wait before writing to archive storage. This exists to allow enough time for all the datafiles to be
                        added to a dataset before it is zipped and written.
                    </dd>

                    <dt>compressDatasetCache</dt>
                    <dd>If true the dataset cache and the archive storage of datasets will all be compressed. This takes longer to write and is only
                        useful if you know that the data will compress well.
                    </dd>

                    <dt>tolerateWrongCompression</dt>
                    <dd>If true a get or prepareData which is for a single dataset will make use of the dataset cache even though it does not match
                        the requested compression.
                    </dd>

                    <dt>minFreeSpace1024bytes</dt>
                    <dd>the minumum free space on the main storage area. If the free space falls below this value, datasets will be archived (oldest
                        first) until the free space is greater than maxFreeSpace1024bytes.
                    </dd>

                    <dt>maxFreeSpace1024bytes</dt>
                    <dd>the mamimum free space on the main storage area. If the free space falls below minFreeSpace1024bytes datasets will be archived
                        (oldest
                        first) until the free space is greater than this value.
                    </dd>

                </dl>


                <h4>Properties for file checking</h4>
                <p>
                    When a datafile is added to the IDS its length and checksum are computed and stored in ICAT. File checking, if enabled, cycles
                    through all the stored data making sure that they can be read and that files have the expected size and checksum.
                </p>
                <dl>
                    <dt>filesCheck.parallelCount</dt>
                    <dd>
                        This must always be set, and if non zero then the readability of the data will be checked. The behaviour is dependent upon
                        whether or not archive storage has a been requested. In the case of single level storage this is done in groups of files where
                        the group size is defined by this parameter. If archive storage has been requested then only the archive is checked. Each file
                        in the archive holds a complete dataset and this filesCheck.parallelCount parameter then defines how many dataset files will
                        be checked in parallel.
                        <p> In the case of checking datasets in the archive storage these are unzipped on the fly to compute the checksum of each file
                            inside the zip file as well as its length.
                        </p>
                        <p>
                            If the archive storage has a long latency then it is useful to have a "large" value, however a thread is started for each
                            stored file so the value of this parameter should not be too large.
                        </p>
                    </dd>
                    <dt>filesCheck.gapSeconds</dt>
                    <dd>the number of seconds to wait before launching a check of the next batch of datafiles or datasets.</dd>
                    <dt>filesCheck.lastIdFile</dt>
                    <dd>the location of a file which is used to store the id value of the last datafile or dataset to be checked. This is so that if
                        the IDS is restarted it will continue checking where it left off. If this file is deleted the ids will restart checking from
                        the beginning. The parameters filesCheck.parallelCount and filesCheck.gapSeconds should be set so that the data are all
                        checked with the desired frequency but without excessive I/O. A nagios plugin might check that this file is being written
                        periodically and that its contents change.
                    </dd>
                    <dt>filesCheck.errorLog</dt>
                    <dd>the file with a list of errors found. The file is not kept open but instead is opened in append mode each time a problem is
                        spotted and then closed. A nagios plugin might be set up to watch this file. Entries in the file are data stamped and new
                        entries are simply appended without regard for the existence of an entry for the same file.
                    </dd>
                </dl>

            </subsection>

            <subsection name="Check that the ids server works">
                <p>
                    Enter a url of the form
                    <code>https://example.com:443/ids/ping</code>
                    into a web browse and it should respond:
                    <code>IdsOK</code>
                    . Note the url is that of the machine hosting the IDS followed by "/ids/ping"
                </p>

            </subsection>

            <subsection name="Possible glassfish problem">
                With this component installed it can be impossible to start the glassfish domain. The conditions under which
                this occurs are not
                understood. A recipe
                to get glassfish started may be found at the bottom of:
                <a href="http://icatproject.org/installation/glassfish/">http:/code.google.com/p/icatproject/wiki/Glassfish</a>
                . The issue has not been seen with glassfish 4.
            </subsection>

        </section>
    </body>
</document>
            
