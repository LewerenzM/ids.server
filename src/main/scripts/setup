#!/usr/bin/env python
from setup_utils import *
import os

# ids

actions, options, arg = getActions()
props = actions.getGlassfish("ids-setup.properties", ["connectionProperties", "glassfish", "driver", "port"])

prop_name = "ids.properties"
prop_list = []

if arg == "CONFIGURE":
    actions.configure(prop_name, prop_list) 
    actions.setConfigured()

elif arg == "INSTALL":
    
    actions.checkConfigured()
    
    idsProperties = actions.getProperties(prop_name, prop_list)

    actions.installFile("ids.properties")
    
    try:          
        app = actions.getAppName("ids")
        if app: actions.asadmin("undeploy " + app)
        
        actions.asadmin("delete-jdbc-resource jdbc/ids", tolerant=True)
        actions.asadmin("delete-jdbc-connection-pool ids", tolerant=True)
        
        actions.asadmin('create-jdbc-connection-pool --datasourceclassname ' + props["driver"] + 
                ' --restype javax.sql.DataSource --failconnection=true --steadypoolsize 2' + 
                ' --maxpoolsize 8 --ping --property ' + props["connectionProperties"] + ' ids', printOutput=True)
        
        actions.asadmin("create-jdbc-resource --connectionpoolid ids jdbc/ids")
         
        actions.deploy("ids-*.war")
                      
    except Exception, e:
        raise
        abort(str(e))
                
else:  # UNINSTALL
    
    idsProperties = actions.getProperties(prop_name, prop_list)
    
    actions.removeFile("ids.properties")
 
    try:
        app = actions.getAppName("ids.war")
        if app: actions.asadmin("undeploy " + app)
        actions.asadmin("delete-jdbc-resource jdbc/ids", tolerant=True)
        actions.asadmin("delete-jdbc-connection-pool ids", tolerant=True)
          
    except Exception, e:
        abort(str(e))       
    
            
    
